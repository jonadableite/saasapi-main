generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InstanceStatus {
  OPEN
  CLOSED
  CONNECTED
  DISCONNECTED
  CONNECTING
  OFFLINE
  ERROR
  RECEIVED
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

model Company {
  id                      String            @id @default(uuid())
  name                    String
  active                  Boolean?          @default(true)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  WhatleadUser            User[]
  whatleadparceiroconfigs CompaniesUnites[]

  @@index([createdAt(sort: Desc)])
  @@map("whatlead_companies")
}

model User {
  id                       String            @id @default(uuid())
  evoAiUserId              String? // ID do usuário na Evo AI
  client_Id                String? // ID do cliente na Evo AI
  email                    String            @unique
  name                     String
  password                 String
  image                    String?
  profile                  String
  phone                    String
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  active                   Boolean?          @default(true)
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt
  whatleadCompanyId        String
  plan                     String            @default("free")
  status                   Boolean           @default(true)
  maxInstances             Int               @default(2)
  messagesPerDay           Int               @default(20)
  features                 String[]          @default([])
  support                  String            @default("basic")
  trialEndDate             DateTime?
  instances                Instance[]
  payments                 Payment[]
  warmupStats              WarmupStats[]
  Campaign                 Campaign[]
  company                  Company           @relation(fields: [whatleadCompanyId], references: [id])
  CampaignLead             CampaignLead[]
  referredBy               String?
  affiliate                User?             @relation("AffiliateReferral", fields: [referredBy], references: [id])
  role                     String            @default("user") // Valores: "admin", "affiliate", "manager", "user"
  // Relação para o campo affiliate
  affiliates               User[]            @relation("AffiliateReferral")
  Message                  Message[]
  Conversation             Conversation[]
  contacts                 Contact[]
  contactNotes             ContactNote[]
  hotmartCustomers         HotmartCustomer[] // Relacionamento com clientes Hotmart
  MessageReaction          MessageReaction[]

  @@index([email, profile, phone, createdAt(sort: Desc)])
  @@map("whatlead_users")
}

model CompaniesUnites {
  id                         String    @id @default(uuid())
  createdAt                  DateTime? @db.Date
  name                       String?
  productdefault             String?
  campaignstatus             String?
  enablecuration             Boolean?
  enabletosendustolead       Boolean?
  enabled                    Boolean?
  isconversationia           Boolean?
  campaignnumberbusiness     String?   @unique
  whatsappprovider           String?
  enabletosendprovider       Boolean?
  enabletosecondcallprovider Boolean?
  integrationconfiguration   Json?
  integrationname            String?
  templatelistvars           Json[]
  metaconfiguration          Json?
  messageperruns             Json[]
  notifyconfiguration        Json?
  updatedAt                  DateTime? @db.Date
  whitelabel_config          String
  whatleadCompanyId          String?
  leads                      Lead[]
  company                    Company?  @relation(fields: [whatleadCompanyId], references: [id])

  @@map("whatleadparceiroconfigs")
}

model Lead {
  id                      String          @id @default(uuid())
  externalid              String?
  sourceid                String?
  name                    String
  phone                   String
  email                   String?
  lastmessagesent         DateTime?
  stepsecondcalltemplate  Int?
  stepnointeraction       Int?
  nointeractionquantity   Int?
  accepttemplate          Boolean?
  acceptsecondtemplate    Boolean?
  status                  String?
  dialog                  Json[]
  MessageLog              MessageLog[]
  configid                String
  whitelabelconfig        String
  lastintent              String?
  broker                  String?
  origin                  String?
  send                    Boolean?
  sendAt                  DateTime?
  isBusinessAutoResponder Boolean?        @default(false)
  startmessage            DateTime?       @default(now())
  schedulingdata          String?
  productchoosebyclient   String?
  productid               Int?
  createdat               DateTime        @default(now())
  updatedat               DateTime        @updatedAt
  curation                Json?
  config                  CompaniesUnites @relation(fields: [configid], references: [id])

  @@index([phone, configid])
  @@map("whatleadleads")
}

model Payment {
  id              String   @id @default(uuid())
  stripePaymentId String   @unique
  amount          Int
  currency        String
  status          String // Valores: "pending", "completed", "overdue"
  dueDate         DateTime // Data de vencimento
  customerId      String?
  metadata        Json?
  disputeStatus   String?
  disputeReason   String?
  cancelReason    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])

  @@index([customerId])
  @@index([status])
  @@index([userId])
}

model Instance {
  id                      String         @id @default(uuid())
  instanceName            String         @unique
  connectionStatus        InstanceStatus @default(DISCONNECTED)
  number                  String?
  ownerJid                String?
  profilePicUrl           String?
  integration             String         @default("WHATSAPP-BAILEYS")
  token                   String?
  clientName              String?
  profileName             String?
  userId                  String
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  disconnectedAt          DateTime?
  disconnectionObject     Json?
  disconnectionReasonCode String?
  proxyConfig             Json?
  typebot                 Json?

  // Relações
  user               User               @relation(fields: [userId], references: [id])
  campaigns          Campaign[]
  campaignSchedules  CampaignSchedule[]
  campaignDispatches CampaignDispatch[]
  warmupStats        WarmupStats[]
  mediaStats         MediaStats[]
  campaignInstances  CampaignInstance[]

  @@index([userId])
  @@index([instanceName])
  @@index([connectionStatus])
}

model MediaStats {
  id                  String        @id @default(uuid())
  instanceName        String
  date                DateTime      @default(now())
  text                Int           @default(0)
  image               Int           @default(0)
  video               Int           @default(0)
  audio               Int           @default(0)
  sticker             Int           @default(0)
  reaction            Int           @default(0)
  isReceived          Boolean       @default(false)
  totalDaily          Int           @default(0)
  totalAllTime        Int           @default(0)
  totalSent           Int           @default(0)
  totalReceived       Int           @default(0)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())
  instance            Instance      @relation(fields: [instanceName], references: [instanceName])
  warmupStatsReceived WarmupStats[] @relation("WarmupStatsToMediaStatsReceived")
  warmupStatsSent     WarmupStats[] @relation("WarmupStatsToMediaStatsSent")

  @@index([instanceName])
  @@index([date])
}

model WarmupStats {
  id               String    @id @default(uuid())
  instanceName     String    @unique
  status           String    @default("paused")
  messagesSent     Int       @default(0)
  messagesReceived Int       @default(0)
  warmupTime       Int       @default(0)
  lastActive       DateTime  @default(now())
  startTime        DateTime?
  pauseTime        DateTime?
  progress         Int       @default(0)
  userId           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  mediaStatsId     String?
  mediaReceivedId  String?

  instance      Instance    @relation(fields: [instanceName], references: [instanceName])
  mediaReceived MediaStats? @relation("WarmupStatsToMediaStatsReceived", fields: [mediaReceivedId], references: [id])
  mediaStats    MediaStats? @relation("WarmupStatsToMediaStatsSent", fields: [mediaStatsId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([instanceName])
}

model Campaign {
  id                     String    @id @default(uuid())
  name                   String
  description            String?
  status                 String    @default("draft")
  type                   String
  message                String?
  mediaUrl               String?
  mediaType              String?
  mediaCaption           String?
  scheduledDate          DateTime?
  scheduledStatus        String?   @default("pending")
  startedAt              DateTime?
  completedAt            DateTime?
  pausedAt               DateTime?
  progress               Int       @default(0)
  minDelay               Int       @default(5)
  maxDelay               Int       @default(30)
  userId                 String
  instanceId             String?
  // Novos campos para rotatividade
  useInstanceRotation    Boolean   @default(false)
  rotationStrategy       String    @default("RANDOM") // RANDOM, SEQUENTIAL, LOAD_BALANCED
  maxMessagesPerInstance Int? // Limite de mensagens por instância antes de alternar
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  isAiResponder          Json?

  MessageLog        MessageLog[]
  leads             CampaignLead[]
  messages          CampaignMessage[]
  statistics        CampaignStatistics?
  dispatches        CampaignDispatch[]
  user              User                @relation(fields: [userId], references: [id])
  instance          Instance?           @relation(fields: [instanceId], references: [id])
  CampaignErrorLog  CampaignErrorLog[]
  CampaignSchedule  CampaignSchedule[]
  MessageAnalytics  MessageAnalytics[]
  contacts          Contact[]           @relation("ContactCampaigns")
  // Nova relação para múltiplas instâncias
  campaignInstances CampaignInstance[]

  @@index([userId])
  @@index([instanceId])
  @@index([status])
  @@map("whatlead_campaigns")
}

// Nova tabela para armazenar múltiplas instâncias por campanha
model CampaignInstance {
  id           String    @id @default(uuid())
  campaignId   String
  instanceId   String
  instanceName String
  priority     Int       @default(0) // Prioridade da instância (0 = mais alta)
  isActive     Boolean   @default(true)
  maxMessages  Int? // Limite de mensagens para esta instância
  messagesSent Int       @default(0) // Contador de mensagens enviadas
  lastUsedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@unique([campaignId, instanceId])
  @@index([campaignId])
  @@index([instanceId])
  @@index([isActive])
  @@index([priority])
  @@map("whatlead_campaign_instances")
}

model CampaignDispatch {
  id           String    @id @default(uuid())
  campaignId   String
  instanceName String
  status       String    @default("pending")
  startedAt    DateTime?
  completedAt  DateTime?

  campaign  Campaign @relation(fields: [campaignId], references: [id])
  instance  Instance @relation(fields: [instanceName], references: [instanceName])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CampaignMessage {
  id         String   @id @default(uuid())
  campaignId String
  type       String
  content    String
  order      Int
  caption    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("whatlead_campaign_messages")
}

model CampaignLead {
  id            String       @id @default(uuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  campaignId    String
  name          String?
  phone         String
  status        String       @default("pending")
  sentAt        DateTime?
  deliveredAt   DateTime?
  readAt        DateTime?
  failedAt      DateTime?
  failureReason String?
  messageId     String?
  messageLogs   MessageLog[]
  segment       String?
  engagement    String?
  syncedWithCRM Boolean      @default(false)
  syncedAt      DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  campaign      Campaign     @relation(fields: [campaignId], references: [id])

  @@unique([campaignId, phone], name: "unique_campaign_phone")
  @@index([campaignId])
  @@index([phone])
  @@index([status])
  @@map("whatlead_campaign_leads")
}

model CampaignSchedule {
  id            String    @id @default(uuid())
  campaignId    String
  instanceName  String
  scheduledDate DateTime
  status        String    @default("pending")
  message       String?
  mediaType     String?
  mediaUrl      String?
  mediaCaption  String?
  minDelay      Int       @default(5)
  maxDelay      Int       @default(30)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  startedAt     DateTime?
  completedAt   DateTime?

  campaign Campaign @relation(fields: [campaignId], references: [id])
  instance Instance @relation(fields: [instanceName], references: [instanceName])

  @@index([campaignId])
  @@index([instanceName])
  @@index([scheduledDate])
  @@map("campaign_schedules")
}

model CampaignStatistics {
  id             String    @id @default(uuid())
  campaignId     String    @unique
  totalLeads     Int       @default(0)
  sentCount      Int       @default(0)
  deliveredCount Int       @default(0)
  readCount      Int       @default(0)
  failedCount    Int       @default(0)
  startedAt      DateTime?
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  campaign       Campaign  @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("whatlead_campaign_statistics")
}

model MessageLog {
  id             String       @id @default(uuid())
  campaignId     String
  campaign       Campaign     @relation(fields: [campaignId], references: [id])
  campaignLeadId String
  campaignLead   CampaignLead @relation(fields: [campaignLeadId], references: [id])
  leadId         String?
  lead           Lead?        @relation(fields: [leadId], references: [id])
  messageId      String
  messageDate    DateTime
  messageType    String
  content        String
  status         String
  statusHistory  Json[]
  sentAt         DateTime?
  deliveredAt    DateTime?
  readAt         DateTime?
  failedAt       DateTime?
  failureReason  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

  @@unique([messageId, messageDate])
  @@index([campaignId, messageDate])
  @@index([campaignLeadId, messageDate])
  @@index([status])
}

model MessageAnalytics {
  id             String   @id @default(uuid())
  campaignId     String
  date           DateTime
  sentCount      Int      @default(0)
  deliveredCount Int      @default(0)
  readCount      Int      @default(0)
  respondedCount Int      @default(0)
  failedCount    Int      @default(0)
  campaign       Campaign @relation(fields: [campaignId], references: [id])

  @@unique([campaignId, date])
}

model Contact {
  id                String         @id @default(uuid())
  phone             String
  name              String?
  email             String?
  company           String?
  notes             String?
  tags              String[]       @default([])
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  lastInteractionAt DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  source            String?
  campaigns         Campaign[]     @relation("ContactCampaigns")
  conversations     Conversation[]
  contactNotes      ContactNote[]

  @@unique([phone, userId], name: "Contact_phone_userId")
}

model Conversation {
  id              String            @id @default(uuid())
  instanceName    String
  contactPhone    String
  contactName     String?
  contactAvatar   String?
  lastMessageAt   DateTime          @default(now())
  lastMessage     String?
  unreadCount     Int               @default(0)
  status          String            @default("OPEN")
  tags            Json              @default("{}")
  isActive        Boolean           @default(true)
  messages        Message[]
  contactId       String?
  contact         Contact?          @relation(fields: [contactId], references: [id])
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  isGroup         Boolean           @default(false)
  groupMetadata   Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MessageReaction MessageReaction[]

  @@unique([instanceName, contactPhone], name: "Conversation_instanceName_contactPhone")
  @@index([userId, lastMessageAt])
}

model Message {
  id              String              @id @default(uuid())
  conversationId  String
  conversation    Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messageId       String              @unique
  content         String
  type            String              @default("text") // text, image, audio, video, document
  sender          String // fromMe ou contact phone
  status          MessageStatus       @default(PENDING)
  timestamp       DateTime
  mediaUrl        String?
  mediaType       String?
  replyTo         Json?
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  failureReason   String?
  createdAt       DateTime            @default(now())
  attachments     MessageAttachment[]
  MessageReaction MessageReaction[]

  @@index([conversationId, timestamp])
  @@index([userId, timestamp])
}

model MessageAttachment {
  id        String   @id @default(uuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  type      String // image, video, audio, document
  url       String
  name      String?
  mimeType  String?
  filename  String?
  size      Int?
  createdAt DateTime @default(now())

  @@index([messageId])
}

model CampaignErrorLog {
  id           String   @id @default(uuid())
  campaignId   String
  errorMessage String
  errorDetails Json?
  createdAt    DateTime @default(now())
  campaign     Campaign @relation(fields: [campaignId], references: [id])
}

model ContactNote {
  id        String   @id @default(uuid())
  contactId String
  contact   Contact  @relation(fields: [contactId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model MessageReaction {
  id        String   @id @default(uuid())
  messageId String
  userId    String
  reaction  String // emoji ou tipo de reação
  createdAt DateTime @default(now())

  message        Message       @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?

  @@unique([messageId, userId])
  @@map("message_reactions")
}

// Sistema de Gerenciamento de Clientes Hotmart
model HotmartCustomer {
  id                      String    @id @default(uuid())
  subscriberCode          String    @unique // Código único do assinante na Hotmart
  transaction             String? // ID da transação
  productId               String // ID do produto na Hotmart
  productName             String // Nome do produto
  customerName            String // Nome do cliente
  customerEmail           String // Email do cliente
  customerPhone           String? // Telefone do cliente
  customerDocument        String? // CPF/CNPJ do cliente
  customerCountry         String? // País do cliente
  customerCity            String? // Cidade do cliente
  customerState           String? // Estado do cliente
  customerZipCode         String? // CEP do cliente
  customerAddress         String? // Endereço do cliente
  customerNumber          String? // Número do endereço
  customerComplement      String? // Complemento do endereço
  customerNeighborhood    String? // Bairro do cliente
  paymentType             String? // Tipo de pagamento (CREDITCARD, PIX, BOLETO, etc.)
  paymentMethod           String? // Método de pagamento
  paymentStatus           String // Status do pagamento
  subscriptionStatus      String // Status da assinatura
  subscriptionValue       Decimal   @db.Decimal(10, 2) // Valor da assinatura
  subscriptionCurrency    String    @default("BRL") // Moeda da assinatura
  subscriptionFrequency   String? // Frequência da assinatura (MONTHLY, YEARLY, etc.)
  subscriptionStartDate   DateTime? // Data de início da assinatura
  subscriptionEndDate     DateTime? // Data de término da assinatura
  nextChargeDate          DateTime? // Próxima data de cobrança
  cancelationDate         DateTime? // Data de cancelamento
  cancelationReason       String? // Motivo do cancelamento
  affiliateCode           String? // Código do afiliado
  affiliateName           String? // Nome do afiliado
  producerCode            String? // Código do produtor
  producerName            String? // Nome do produtor
  hotmartUserId           String? // ID do usuário na Hotmart
  hotmartUserEmail        String? // Email do usuário na Hotmart
  hotmartUserName         String? // Nome do usuário na Hotmart
  hotmartUserPhone        String? // Telefone do usuário na Hotmart
  hotmartUserDocument     String? // Documento do usuário na Hotmart
  hotmartUserCountry      String? // País do usuário na Hotmart
  hotmartUserCity         String? // Cidade do usuário na Hotmart
  hotmartUserState        String? // Estado do usuário na Hotmart
  hotmartUserZipCode      String? // CEP do usuário na Hotmart
  hotmartUserAddress      String? // Endereço do usuário na Hotmart
  hotmartUserNumber       String? // Número do endereço do usuário
  hotmartUserComplement   String? // Complemento do endereço do usuário
  hotmartUserNeighborhood String? // Bairro do usuário
  isActive                Boolean   @default(true) // Se o cliente está ativo
  isTrial                 Boolean   @default(false) // Se está em período de teste
  trialEndDate            DateTime? // Data de fim do período de teste
  lastLoginDate           DateTime? // Última data de login
  lastActivityDate        DateTime? // Última data de atividade
  notes                   String? // Observações sobre o cliente
  tags                    String[]  @default([]) // Tags para segmentação
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // Relacionamentos
  hotmartEvents       HotmartEvent[]
  hotmartTransactions HotmartTransaction[]
  whatleadUser        User?                @relation(fields: [whatleadUserId], references: [id])
  whatleadUserId      String? // ID do usuário no sistema Whatlead
  HotmartProduct      HotmartProduct?      @relation(fields: [hotmartProductId], references: [id])
  hotmartProductId    String?

  @@index([subscriberCode])
  @@index([customerEmail])
  @@index([subscriptionStatus])
  @@index([paymentStatus])
  @@index([nextChargeDate])
  @@index([createdAt(sort: Desc)])
  @@map("hotmart_customers")
}

model HotmartEvent {
  id             String    @id @default(uuid())
  eventType      String // Tipo do evento (PURCHASE_APPROVED, SUBSCRIPTION_CANCELLED, etc.)
  eventData      Json // Dados completos do evento
  eventDate      DateTime // Data do evento
  transaction    String? // ID da transação
  subscriberCode String? // Código do assinante
  productId      String? // ID do produto
  status         String // Status do processamento
  processedAt    DateTime? // Data de processamento
  errorMessage   String? // Mensagem de erro se houver
  retryCount     Int       @default(0) // Contador de tentativas
  maxRetries     Int       @default(3) // Máximo de tentativas
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relacionamentos
  customer   HotmartCustomer? @relation(fields: [customerId], references: [id])
  customerId String?

  @@index([eventType])
  @@index([eventDate(sort: Desc)])
  @@index([status])
  @@index([transaction])
  @@index([subscriberCode])
  @@map("hotmart_events")
}

model HotmartTransaction {
  id                   String    @id @default(uuid())
  transactionId        String    @unique // ID único da transação
  subscriberCode       String // Código do assinante
  productId            String // ID do produto
  transactionType      String // Tipo da transação
  transactionStatus    String // Status da transação
  transactionValue     Decimal   @db.Decimal(10, 2) // Valor da transação
  transactionCurrency  String    @default("BRL") // Moeda da transação
  paymentType          String? // Tipo de pagamento
  paymentMethod        String? // Método de pagamento
  paymentStatus        String // Status do pagamento
  paymentDate          DateTime? // Data do pagamento
  dueDate              DateTime? // Data de vencimento
  refundDate           DateTime? // Data de reembolso
  refundValue          Decimal?  @db.Decimal(10, 2) // Valor do reembolso
  refundReason         String? // Motivo do reembolso
  chargebackDate       DateTime? // Data do chargeback
  chargebackValue      Decimal?  @db.Decimal(10, 2) // Valor do chargeback
  chargebackReason     String? // Motivo do chargeback
  installmentNumber    Int? // Número da parcela
  totalInstallments    Int? // Total de parcelas
  affiliateCode        String? // Código do afiliado
  affiliateName        String? // Nome do afiliado
  commissionValue      Decimal?  @db.Decimal(10, 2) // Valor da comissão
  commissionPercentage Decimal?  @db.Decimal(5, 2) // Percentual da comissão
  producerCode         String? // Código do produtor
  producerName         String? // Nome do produtor
  producerValue        Decimal?  @db.Decimal(10, 2) // Valor do produtor
  producerPercentage   Decimal?  @db.Decimal(5, 2) // Percentual do produtor
  platformValue        Decimal?  @db.Decimal(10, 2) // Valor da plataforma
  platformPercentage   Decimal?  @db.Decimal(5, 2) // Percentual da plataforma
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relacionamentos
  customer   HotmartCustomer @relation(fields: [customerId], references: [id])
  customerId String

  @@index([transactionId])
  @@index([subscriberCode])
  @@index([transactionStatus])
  @@index([paymentStatus])
  @@index([paymentDate(sort: Desc)])
  @@map("hotmart_transactions")
}

model HotmartProduct {
  id                    String   @id @default(uuid())
  productId             String   @unique // ID do produto na Hotmart
  productName           String // Nome do produto
  productType           String // Tipo do produto (SUBSCRIPTION, ONE_TIME, etc.)
  productCategory       String? // Categoria do produto
  productSubcategory    String? // Subcategoria do produto
  productDescription    String? // Descrição do produto
  productPrice          Decimal  @db.Decimal(10, 2) // Preço do produto
  productCurrency       String   @default("BRL") // Moeda do produto
  productStatus         String // Status do produto
  productUrl            String? // URL do produto
  productImage          String? // URL da imagem do produto
  productVideo          String? // URL do vídeo do produto
  productDocuments      String[] @default([]) // URLs dos documentos do produto
  productTags           String[] @default([]) // Tags do produto
  producerCode          String? // Código do produtor
  producerName          String? // Nome do produtor
  producerEmail         String? // Email do produtor
  producerPhone         String? // Telefone do produtor
  affiliateEnabled      Boolean  @default(true) // Se permite afiliados
  commissionPercentage  Decimal? @db.Decimal(5, 2) // Percentual de comissão padrão
  trialEnabled          Boolean  @default(false) // Se permite período de teste
  trialDays             Int? // Dias de teste
  trialPrice            Decimal? @db.Decimal(10, 2) // Preço do teste
  subscriptionEnabled   Boolean  @default(false) // Se permite assinatura
  subscriptionFrequency String? // Frequência da assinatura
  subscriptionPrice     Decimal? @db.Decimal(10, 2) // Preço da assinatura
  subscriptionCycles    Int? // Ciclos da assinatura (null = ilimitado)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relacionamentos
  customers HotmartCustomer[]

  @@index([productId])
  @@index([productStatus])
  @@index([producerCode])
  @@map("hotmart_products")
}

model HotmartAnalytics {
  id                     String   @id @default(uuid())
  date                   DateTime @db.Date // Data da análise
  productId              String? // ID do produto (null = todos)
  metricType             String // Tipo da métrica
  metricValue            Decimal  @db.Decimal(15, 2) // Valor da métrica
  metricUnit             String? // Unidade da métrica
  metricDescription      String? // Descrição da métrica
  activeSubscriptions    Int      @default(0) // Assinaturas ativas
  cancelledSubscriptions Int      @default(0) // Assinaturas canceladas
  delayedSubscriptions   Int      @default(0) // Assinaturas atrasadas
  newSubscriptions       Int      @default(0) // Novas assinaturas
  totalRevenue           Decimal  @default(0) @db.Decimal(15, 2) // Receita total
  refundedRevenue        Decimal  @default(0) @db.Decimal(15, 2) // Receita reembolsada
  chargebackRevenue      Decimal  @default(0) @db.Decimal(15, 2) // Receita com chargeback
  netRevenue             Decimal  @default(0) @db.Decimal(15, 2) // Receita líquida
  churnRate              Decimal  @default(0) @db.Decimal(5, 4) // Taxa de churn
  ltv                    Decimal  @default(0) @db.Decimal(15, 2) // Lifetime Value
  mrr                    Decimal  @default(0) @db.Decimal(15, 2) // Monthly Recurring Revenue
  arr                    Decimal  @default(0) @db.Decimal(15, 2) // Annual Recurring Revenue
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@unique([date, productId, metricType])
  @@index([date(sort: Desc)])
  @@index([productId])
  @@index([metricType])
  @@map("hotmart_analytics")
}
