generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InstanceStatus {
  OPEN
  CLOSED
  CONNECTED
  DISCONNECTED
  CONNECTING
  OFFLINE
  ERROR
  RECEIVED
}

enum MessageStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
}

model Company {
  id                      String            @id @default(uuid())
  name                    String
  active                  Boolean?          @default(true)
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  WhatleadUser            User[]
  whatleadparceiroconfigs CompaniesUnites[]

  @@index([createdAt(sort: Desc)])
  @@map("whatlead_companies")
}

model User {
  id                       String         @id @default(uuid())
  evoAiUserId              String? // ID do usuário na Evo AI
  client_Id                String? // ID do cliente na Evo AI
  email                    String         @unique
  name                     String
  password                 String
  image                    String?
  profile                  String
  phone                    String
  stripeCustomerId         String?
  stripeSubscriptionId     String?
  stripeSubscriptionStatus String?
  active                   Boolean?       @default(true)
  createdAt                DateTime       @default(now())
  updatedAt                DateTime       @updatedAt
  whatleadCompanyId        String
  plan                     String         @default("free")
  status                   Boolean        @default(true)
  maxInstances             Int            @default(2)
  messagesPerDay           Int            @default(20)
  features                 String[]       @default([])
  support                  String         @default("basic")
  trialEndDate             DateTime?
  instances                Instance[]
  payments                 Payment[]
  warmupStats              WarmupStats[]
  Campaign                 Campaign[]
  company                  Company        @relation(fields: [whatleadCompanyId], references: [id])
  CampaignLead             CampaignLead[]
  referredBy               String?
  affiliate                User?          @relation("AffiliateReferral", fields: [referredBy], references: [id])
  role                     String         @default("user") // Valores: "admin", "affiliate", "manager", "user"
  // Relação para o campo affiliate
  affiliates               User[]         @relation("AffiliateReferral")
  Message                  Message[]
  Conversation             Conversation[]
  contacts                 Contact[]
  contactNotes             ContactNote[]

  @@index([email, profile, phone, createdAt(sort: Desc)])
  @@map("whatlead_users")
}

model CompaniesUnites {
  id                         String    @id @default(uuid())
  createdAt                  DateTime? @db.Date
  name                       String?
  productdefault             String?
  campaignstatus             String?
  enablecuration             Boolean?
  enabletosendustolead       Boolean?
  enabled                    Boolean?
  isconversationia           Boolean?
  campaignnumberbusiness     String?   @unique
  whatsappprovider           String?
  enabletosendprovider       Boolean?
  enabletosecondcallprovider Boolean?
  integrationconfiguration   Json?
  integrationname            String?
  templatelistvars           Json[]
  metaconfiguration          Json?
  messageperruns             Json[]
  notifyconfiguration        Json?
  updatedAt                  DateTime? @db.Date
  whitelabel_config          String
  whatleadCompanyId          String?
  leads                      Lead[]
  company                    Company?  @relation(fields: [whatleadCompanyId], references: [id])

  @@map("whatleadparceiroconfigs")
}

model Lead {
  id                      String          @id @default(uuid())
  externalid              String?
  sourceid                String?
  name                    String
  phone                   String
  email                   String?
  lastmessagesent         DateTime?
  stepsecondcalltemplate  Int?
  stepnointeraction       Int?
  nointeractionquantity   Int?
  accepttemplate          Boolean?
  acceptsecondtemplate    Boolean?
  status                  String?
  dialog                  Json[]
  MessageLog              MessageLog[]
  configid                String
  whitelabelconfig        String
  lastintent              String?
  broker                  String?
  origin                  String?
  send                    Boolean?
  sendAt                  DateTime?
  isBusinessAutoResponder Boolean?        @default(false)
  startmessage            DateTime?       @default(now())
  schedulingdata          String?
  productchoosebyclient   String?
  productid               Int?
  createdat               DateTime        @default(now())
  updatedat               DateTime        @updatedAt
  curation                Json?
  config                  CompaniesUnites @relation(fields: [configid], references: [id])

  @@index([phone, configid])
  @@map("whatleadleads")
}

model Payment {
  id              String   @id @default(uuid())
  stripePaymentId String   @unique
  amount          Int
  currency        String
  status          String // Valores: "pending", "completed", "overdue"
  dueDate         DateTime // Data de vencimento
  customerId      String?
  metadata        Json?
  disputeStatus   String?
  disputeReason   String?
  cancelReason    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String?
  user            User?    @relation(fields: [userId], references: [id])

  @@index([customerId])
  @@index([status])
  @@index([userId])
}

model Instance {
  id                      String         @id @default(uuid())
  instanceName            String         @unique
  connectionStatus        InstanceStatus @default(DISCONNECTED)
  number                  String?
  ownerJid                String?
  profilePicUrl           String?
  integration             String         @default("WHATSAPP-BAILEYS")
  token                   String?
  clientName              String?
  profileName             String?
  userId                  String
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt
  disconnectedAt          DateTime?
  disconnectionObject     Json?
  disconnectionReasonCode String?
  proxyConfig             Json?
  typebot                 Json?

  // Relações
  user               User               @relation(fields: [userId], references: [id])
  campaigns          Campaign[]
  campaignSchedules  CampaignSchedule[]
  campaignDispatches CampaignDispatch[]
  warmupStats        WarmupStats[]
  mediaStats         MediaStats[]
  campaignInstances  CampaignInstance[]

  @@index([userId])
  @@index([instanceName])
  @@index([connectionStatus])
}

model MediaStats {
  id                  String        @id @default(uuid())
  instanceName        String
  date                DateTime      @default(now())
  text                Int           @default(0)
  image               Int           @default(0)
  video               Int           @default(0)
  audio               Int           @default(0)
  sticker             Int           @default(0)
  reaction            Int           @default(0)
  isReceived          Boolean       @default(false)
  totalDaily          Int           @default(0)
  totalAllTime        Int           @default(0)
  totalSent           Int           @default(0)
  totalReceived       Int           @default(0)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @default(now())
  instance            Instance      @relation(fields: [instanceName], references: [instanceName])
  warmupStatsReceived WarmupStats[] @relation("WarmupStatsToMediaStatsReceived")
  warmupStatsSent     WarmupStats[] @relation("WarmupStatsToMediaStatsSent")

  @@index([instanceName])
  @@index([date])
}

model WarmupStats {
  id               String    @id @default(uuid())
  instanceName     String    @unique
  status           String    @default("paused")
  messagesSent     Int       @default(0)
  messagesReceived Int       @default(0)
  warmupTime       Int       @default(0)
  lastActive       DateTime  @default(now())
  startTime        DateTime?
  pauseTime        DateTime?
  progress         Int       @default(0)
  userId           String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now())
  mediaStatsId     String?
  mediaReceivedId  String?

  instance      Instance    @relation(fields: [instanceName], references: [instanceName])
  mediaReceived MediaStats? @relation("WarmupStatsToMediaStatsReceived", fields: [mediaReceivedId], references: [id])
  mediaStats    MediaStats? @relation("WarmupStatsToMediaStatsSent", fields: [mediaStatsId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([instanceName])
}

model Campaign {
  id                     String    @id @default(uuid())
  name                   String
  description            String?
  status                 String    @default("draft")
  type                   String
  message                String?
  mediaUrl               String?
  mediaType              String?
  mediaCaption           String?
  scheduledDate          DateTime?
  scheduledStatus        String?   @default("pending")
  startedAt              DateTime?
  completedAt            DateTime?
  pausedAt               DateTime?
  progress               Int       @default(0)
  minDelay               Int       @default(5)
  maxDelay               Int       @default(30)
  userId                 String
  instanceId             String?
  // Novos campos para rotatividade
  useInstanceRotation    Boolean   @default(false)
  rotationStrategy       String    @default("RANDOM") // RANDOM, SEQUENTIAL, LOAD_BALANCED
  maxMessagesPerInstance Int? // Limite de mensagens por instância antes de alternar
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  isAiResponder          Json?

  MessageLog        MessageLog[]
  leads             CampaignLead[]
  messages          CampaignMessage[]
  statistics        CampaignStatistics?
  dispatches        CampaignDispatch[]
  user              User                @relation(fields: [userId], references: [id])
  instance          Instance?           @relation(fields: [instanceId], references: [id])
  CampaignErrorLog  CampaignErrorLog[]
  CampaignSchedule  CampaignSchedule[]
  MessageAnalytics  MessageAnalytics[]
  contacts          Contact[]           @relation("ContactCampaigns")
  // Nova relação para múltiplas instâncias
  campaignInstances CampaignInstance[]

  @@index([userId])
  @@index([instanceId])
  @@index([status])
  @@map("whatlead_campaigns")
}

// Nova tabela para armazenar múltiplas instâncias por campanha
model CampaignInstance {
  id           String    @id @default(uuid())
  campaignId   String
  instanceId   String
  instanceName String
  priority     Int       @default(0) // Prioridade da instância (0 = mais alta)
  isActive     Boolean   @default(true)
  maxMessages  Int? // Limite de mensagens para esta instância
  messagesSent Int       @default(0) // Contador de mensagens enviadas
  lastUsedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  instance Instance @relation(fields: [instanceId], references: [id], onDelete: Cascade)

  @@unique([campaignId, instanceId])
  @@index([campaignId])
  @@index([instanceId])
  @@index([isActive])
  @@index([priority])
  @@map("whatlead_campaign_instances")
}

model CampaignDispatch {
  id           String    @id @default(uuid())
  campaignId   String
  instanceName String
  status       String    @default("pending")
  startedAt    DateTime?
  completedAt  DateTime?

  campaign  Campaign @relation(fields: [campaignId], references: [id])
  instance  Instance @relation(fields: [instanceName], references: [instanceName])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model CampaignMessage {
  id         String   @id @default(uuid())
  campaignId String
  type       String
  content    String
  order      Int
  caption    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("whatlead_campaign_messages")
}

model CampaignLead {
  id            String       @id @default(uuid())
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  campaignId    String
  name          String?
  phone         String
  status        String       @default("pending")
  sentAt        DateTime?
  deliveredAt   DateTime?
  readAt        DateTime?
  failedAt      DateTime?
  failureReason String?
  messageId     String?
  messageLogs   MessageLog[]
  segment       String?
  engagement    String?
  syncedWithCRM Boolean      @default(false)
  syncedAt      DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  campaign      Campaign     @relation(fields: [campaignId], references: [id])

  @@unique([campaignId, phone], name: "unique_campaign_phone")
  @@index([campaignId])
  @@index([phone])
  @@index([status])
  @@map("whatlead_campaign_leads")
}

model CampaignSchedule {
  id            String    @id @default(uuid())
  campaignId    String
  instanceName  String
  scheduledDate DateTime
  status        String    @default("pending")
  message       String?
  mediaType     String?
  mediaUrl      String?
  mediaCaption  String?
  minDelay      Int       @default(5)
  maxDelay      Int       @default(30)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  startedAt     DateTime?
  completedAt   DateTime?

  campaign Campaign @relation(fields: [campaignId], references: [id])
  instance Instance @relation(fields: [instanceName], references: [instanceName])

  @@index([campaignId])
  @@index([instanceName])
  @@index([scheduledDate])
  @@map("campaign_schedules")
}

model CampaignStatistics {
  id             String    @id @default(uuid())
  campaignId     String    @unique
  totalLeads     Int       @default(0)
  sentCount      Int       @default(0)
  deliveredCount Int       @default(0)
  readCount      Int       @default(0)
  failedCount    Int       @default(0)
  startedAt      DateTime?
  completedAt    DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  campaign       Campaign  @relation(fields: [campaignId], references: [id])

  @@index([campaignId])
  @@map("whatlead_campaign_statistics")
}

model MessageLog {
  id             String       @id @default(uuid())
  campaignId     String
  campaign       Campaign     @relation(fields: [campaignId], references: [id])
  campaignLeadId String
  campaignLead   CampaignLead @relation(fields: [campaignLeadId], references: [id])
  leadId         String?
  lead           Lead?        @relation(fields: [leadId], references: [id])
  messageId      String
  messageDate    DateTime
  messageType    String
  content        String
  status         String
  statusHistory  Json[]
  sentAt         DateTime?
  deliveredAt    DateTime?
  readAt         DateTime?
  failedAt       DateTime?
  failureReason  String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

  @@unique([messageId, messageDate])
  @@index([campaignId, messageDate])
  @@index([campaignLeadId, messageDate])
  @@index([status])
}

model MessageAnalytics {
  id             String   @id @default(uuid())
  campaignId     String
  date           DateTime
  sentCount      Int      @default(0)
  deliveredCount Int      @default(0)
  readCount      Int      @default(0)
  respondedCount Int      @default(0)
  failedCount    Int      @default(0)
  campaign       Campaign @relation(fields: [campaignId], references: [id])

  @@unique([campaignId, date])
}

model Contact {
  id                String         @id @default(uuid())
  phone             String
  name              String?
  email             String?
  company           String?
  notes             String?
  tags              String[]       @default([])
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  lastInteractionAt DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  source            String?
  campaigns         Campaign[]     @relation("ContactCampaigns")
  conversations     Conversation[]
  contactNotes      ContactNote[]

  @@unique([phone, userId], name: "Contact_phone_userId")
}

model Conversation {
  id              String            @id @default(uuid())
  instanceName    String
  contactPhone    String
  contactName     String?
  contactAvatar   String?
  lastMessageAt   DateTime          @default(now())
  lastMessage     String?
  unreadCount     Int               @default(0)
  status          String            @default("OPEN")
  tags            Json              @default("{}")
  isActive        Boolean           @default(true)
  messages        Message[]
  contactId       String?
  contact         Contact?          @relation(fields: [contactId], references: [id])
  userId          String
  user            User              @relation(fields: [userId], references: [id])
  isGroup         Boolean           @default(false)
  groupMetadata   Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  MessageReaction MessageReaction[]

  @@unique([instanceName, contactPhone], name: "Conversation_instanceName_contactPhone")
  @@index([userId, lastMessageAt])
}

model Message {
  id             String              @id @default(uuid())
  conversationId String
  conversation   Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  messageId      String              @unique
  content        String
  type           String              @default("text") // text, image, audio, video, document
  sender         String // fromMe ou contact phone
  status         MessageStatus       @default(PENDING)
  timestamp      DateTime
  mediaUrl       String?
  mediaType      String?
  replyTo        Json?
  userId         String
  user           User                @relation(fields: [userId], references: [id])
  failureReason  String?
  createdAt      DateTime            @default(now())
  attachments    MessageAttachment[]

  @@index([conversationId, timestamp])
  @@index([userId, timestamp])
}

model MessageAttachment {
  id        String   @id @default(uuid())
  messageId String
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  type      String // image, video, audio, document
  url       String
  name      String?
  mimeType  String?
  filename  String?
  size      Int?
  createdAt DateTime @default(now())

  @@index([messageId])
}

model CampaignErrorLog {
  id           String   @id @default(uuid())
  campaignId   String
  errorMessage String
  errorDetails Json?
  createdAt    DateTime @default(now())
  campaign     Campaign @relation(fields: [campaignId], references: [id])
}

model ContactNote {
  id        String   @id @default(uuid())
  contactId String
  contact   Contact  @relation(fields: [contactId], references: [id])
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model MessageReaction {
  id             String       @id @default(uuid())
  messageId      String
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  reaction       String // emoji usado como reação
  userId         String // ID do usuário que reagiu
  createdAt      DateTime     @default(now())

  @@index([messageId])
  @@index([conversationId])
}
