// Exemplo de uso do Sistema de Rota√ß√£o de Inst√¢ncias WhatsApp
// Este arquivo demonstra como configurar e usar o sistema de rota√ß√£o

const API_BASE_URL = 'http://localhost:3000/api';

// Fun√ß√£o para fazer requisi√ß√µes autenticadas
async function apiRequest(endpoint, options = {}) {
  const token = localStorage.getItem('authToken'); // Seu token de autentica√ß√£o

  const response = await fetch(`${API_BASE_URL}${endpoint}`, {
    ...options,
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`,
      ...options.headers,
    },
  });

  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }

  return response.json();
}

// 1. Listar inst√¢ncias dispon√≠veis
async function listarInstanciasDisponiveis() {
  try {
    console.log('üîç Listando inst√¢ncias dispon√≠veis...');

    const response = await apiRequest('/campaigns/instances/available');

    console.log('‚úÖ Inst√¢ncias dispon√≠veis:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao listar inst√¢ncias:', error);
    throw error;
  }
}

// 2. Criar uma nova campanha
async function criarCampanha(nome, descricao, tipo) {
  try {
    console.log('üìù Criando nova campanha...');

    const response = await apiRequest('/campaigns', {
      method: 'POST',
      body: JSON.stringify({
        name: nome,
        description: descricao,
        type: tipo
      })
    });

    console.log('‚úÖ Campanha criada:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao criar campanha:', error);
    throw error;
  }
}

// 3. Adicionar inst√¢ncias √† campanha com rota√ß√£o
async function configurarRotacaoInstancias(campaignId, instanceIds, estrategia = 'RANDOM', limiteMensagens = 50) {
  try {
    console.log('üîÑ Configurando rota√ß√£o de inst√¢ncias...');

    const response = await apiRequest(`/campaigns/${campaignId}/instances`, {
      method: 'POST',
      body: JSON.stringify({
        instanceIds: instanceIds,
        useRotation: true,
        rotationStrategy: estrategia,
        maxMessagesPerInstance: limiteMensagens
      })
    });

    console.log('‚úÖ Rota√ß√£o configurada:', response.message);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao configurar rota√ß√£o:', error);
    throw error;
  }
}

// 4. Importar leads para a campanha
async function importarLeads(campaignId, leadsData) {
  try {
    console.log('üìä Importando leads...');

    const formData = new FormData();
    formData.append('file', leadsData);

    const response = await fetch(`${API_BASE_URL}/campaigns/${campaignId}/leads/import`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('authToken')}`,
      },
      body: formData
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    console.log('‚úÖ Leads importados:', result);
    return result;
  } catch (error) {
    console.error('‚ùå Erro ao importar leads:', error);
    throw error;
  }
}

// 5. Iniciar campanha com rota√ß√£o autom√°tica
async function iniciarCampanhaComRotacao(campaignId, mensagem, minDelay = 10, maxDelay = 30) {
  try {
    console.log('üöÄ Iniciando campanha com rota√ß√£o autom√°tica...');

    const response = await apiRequest(`/campaigns/${campaignId}/start`, {
      method: 'POST',
      body: JSON.stringify({
        message: mensagem,
        minDelay: minDelay,
        maxDelay: maxDelay
        // Note: N√ÉO especificamos instanceName - o sistema usar√° rota√ß√£o autom√°tica
      })
    });

    console.log('‚úÖ Campanha iniciada:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao iniciar campanha:', error);
    throw error;
  }
}

// 6. Monitorar estat√≠sticas das inst√¢ncias
async function monitorarEstatisticas(campaignId) {
  try {
    console.log('üìä Obtendo estat√≠sticas das inst√¢ncias...');

    const response = await apiRequest(`/campaigns/${campaignId}/instances/stats`);

    console.log('‚úÖ Estat√≠sticas:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao obter estat√≠sticas:', error);
    throw error;
  }
}

// 7. Monitorar progresso da campanha
async function monitorarProgresso(campaignId) {
  try {
    console.log('üìà Obtendo progresso da campanha...');

    const response = await apiRequest(`/campaigns/${campaignId}/progress`);

    console.log('‚úÖ Progresso:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao obter progresso:', error);
    throw error;
  }
}

// 8. Resetar contadores de mensagens
async function resetarContadores(campaignId) {
  try {
    console.log('üîÑ Resetando contadores de mensagens...');

    const response = await apiRequest(`/campaigns/${campaignId}/instances/reset`, {
      method: 'POST'
    });

    console.log('‚úÖ Contadores resetados:', response.message);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao resetar contadores:', error);
    throw error;
  }
}

// 9. Ativar/desativar inst√¢ncia espec√≠fica
async function toggleInstancia(campaignId, instanceId, ativo) {
  try {
    console.log(`${ativo ? 'üü¢' : 'üî¥'} ${ativo ? 'Ativando' : 'Desativando'} inst√¢ncia...`);

    const response = await apiRequest(`/campaigns/${campaignId}/instances/toggle`, {
      method: 'PATCH',
      body: JSON.stringify({
        instanceId: instanceId,
        isActive: ativo
      })
    });

    console.log('‚úÖ Status da inst√¢ncia alterado:', response.message);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao alterar status da inst√¢ncia:', error);
    throw error;
  }
}

// ===== EXEMPLO DE USO COMPLETO =====

async function exemploUsoCompleto() {
  try {
    console.log('üéØ Iniciando exemplo completo de uso da rota√ß√£o de inst√¢ncias...');

    // 1. Listar inst√¢ncias dispon√≠veis
    const instancias = await listarInstanciasDisponiveis();

    if (instancias.length < 2) {
      throw new Error('√â necess√°rio ter pelo menos 2 inst√¢ncias conectadas para usar rota√ß√£o');
    }

    // 2. Criar campanha
    const campanha = await criarCampanha(
      'Campanha com Rota√ß√£o - Teste',
      'Campanha para testar o sistema de rota√ß√£o de inst√¢ncias',
      'mass'
    );

    // 3. Configurar rota√ß√£o (usando as 3 primeiras inst√¢ncias)
    const instanceIds = instancias.slice(0, 3).map(inst => inst.id);
    await configurarRotacaoInstancias(
      campanha.id,
      instanceIds,
      'RANDOM', // Estrat√©gia: aleat√≥ria
      100 // Limite: 100 mensagens por inst√¢ncia
    );

    // 4. Simular importa√ß√£o de leads (voc√™ precisaria de um arquivo real)
    console.log('üìù Simulando importa√ß√£o de leads...');
    // await importarLeads(campanha.id, arquivoLeads);

    // 5. Iniciar campanha
    await iniciarCampanhaComRotacao(
      campanha.id,
      'Ol√°! Esta √© uma mensagem de teste do sistema de rota√ß√£o de inst√¢ncias. üöÄ',
      15, // Delay m√≠nimo: 15 segundos
      45  // Delay m√°ximo: 45 segundos
    );

    // 6. Monitorar progresso em tempo real
    const monitoramento = setInterval(async () => {
      try {
        const [estatisticas, progresso] = await Promise.all([
          monitorarEstatisticas(campanha.id),
          monitorarProgresso(campanha.id)
        ]);

        console.log('üìä Status atual:');
        console.log(`  - Total de mensagens enviadas: ${estatisticas.totalMessagesSent}`);
        console.log(`  - Inst√¢ncias ativas: ${estatisticas.activeInstances}`);
        console.log(`  - Inst√¢ncias conectadas: ${estatisticas.connectedInstances}`);
        console.log(`  - Progresso da campanha: ${progresso.progress}%`);

        // Detalhes por inst√¢ncia
        estatisticas.instances.forEach(inst => {
          console.log(`  üì± ${inst.instanceName}: ${inst.messagesSent}/${inst.maxMessages || '‚àû'} mensagens`);
        });

        // Parar monitoramento se a campanha foi conclu√≠da
        if (progresso.status === 'completed') {
          console.log('‚úÖ Campanha conclu√≠da!');
          clearInterval(monitoramento);
        }

      } catch (error) {
        console.error('‚ùå Erro no monitoramento:', error);
        clearInterval(monitoramento);
      }
    }, 30000); // Verificar a cada 30 segundos

    console.log('üéâ Exemplo iniciado com sucesso! Monitorando progresso...');

  } catch (error) {
    console.error('‚ùå Erro no exemplo completo:', error);
  }
}

// ===== FUN√á√ïES AUXILIARES =====

// Fun√ß√£o para pausar campanha
async function pausarCampanha(campaignId) {
  try {
    const response = await apiRequest(`/campaigns/${campaignId}/pause`, {
      method: 'POST'
    });
    console.log('‚è∏Ô∏è Campanha pausada:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao pausar campanha:', error);
    throw error;
  }
}

// Fun√ß√£o para retomar campanha
async function retomarCampanha(campaignId) {
  try {
    const response = await apiRequest(`/campaigns/${campaignId}/resume`, {
      method: 'POST'
    });
    console.log('‚ñ∂Ô∏è Campanha retomada:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao retomar campanha:', error);
    throw error;
  }
}

// Fun√ß√£o para parar campanha
async function pararCampanha(campaignId) {
  try {
    const response = await apiRequest(`/campaigns/${campaignId}/stop`, {
      method: 'POST'
    });
    console.log('‚èπÔ∏è Campanha parada:', response);
    return response;
  } catch (error) {
    console.error('‚ùå Erro ao parar campanha:', error);
    throw error;
  }
}

// ===== EXPORTA√á√ïES =====

// Para uso em m√≥dulos ES6
export {
  configurarRotacaoInstancias, criarCampanha, exemploUsoCompleto, importarLeads,
  iniciarCampanhaComRotacao, listarInstanciasDisponiveis, monitorarEstatisticas,
  monitorarProgresso, pararCampanha, pausarCampanha, resetarContadores, retomarCampanha, toggleInstancia
};

// Para uso em navegador (global)
if (typeof window !== 'undefined') {
  window.WhatsAppRotationAPI = {
    listarInstanciasDisponiveis,
    criarCampanha,
    configurarRotacaoInstancias,
    importarLeads,
    iniciarCampanhaComRotacao,
    monitorarEstatisticas,
    monitorarProgresso,
    resetarContadores,
    toggleInstancia,
    pausarCampanha,
    retomarCampanha,
    pararCampanha,
    exemploUsoCompleto
  };
}

console.log('üìö Sistema de Rota√ß√£o de Inst√¢ncias WhatsApp carregado!');
console.log('üí° Use exemploUsoCompleto() para testar o sistema');